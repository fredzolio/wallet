version: '3.8'

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - vizo_network
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
    ports: ["5432:5432"]
    restart: unless-stopped

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - vizo_network
    volumes:
      - redis_data:/data
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Interface web para gerenciar o PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:8
    depends_on:
      db: { condition: service_healthy }
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_PROXY_PREFIX: /pgadmin
      SCRIPT_NAME: /pgadmin
    networks:
      - vizo_network
    ports:
      - "5050:80"
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.pgadmin.rule=Host(`walletapi.duckdns.org`) && PathPrefix(`/pgadmin`)'
      - 'traefik.http.routers.pgadmin.entrypoints=websecure'
      - 'traefik.http.routers.pgadmin.tls.certresolver=myresolver'
      - 'traefik.http.middlewares.pgadmin-strip.stripprefix.prefixes=/pgadmin'
      - 'traefik.http.routers.pgadmin.middlewares=pgadmin-strip@docker'
      - 'traefik.http.services.pgadmin.loadbalancer.server.port=80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Keycloak para autenticação e autorização
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_FEATURES: ${KC_FEATURES}
    ports:
      - "8088:8080"
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.keycloak.rule=Host(`walletapi.duckdns.org`) && PathPrefix(`/auth`)'
      - 'traefik.http.routers.keycloak.entrypoints=websecure'
      - 'traefik.http.routers.keycloak.tls.certresolver=myresolver'
      - 'traefik.http.middlewares.keycloak-strip.stripprefix.prefixes=/auth'
      - 'traefik.http.routers.keycloak.middlewares=keycloak-strip@docker'
      - 'traefik.http.services.keycloak.loadbalancer.server.port=8080'
    command: ["start-dev", "--health-enabled=true"]
    networks:
      - vizo_network
    depends_on:
      db: { condition: service_healthy }
    volumes:
      - keycloak_data:/opt/keycloak/data
    restart: unless-stopped

  # Prometheus para coleta de métricas
  prometheus:
    image: prom/prometheus:v2.49.1
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - vizo_network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`walletapi.duckdns.org`) && PathPrefix(`/prometheus`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls.certresolver=myresolver'
      - 'traefik.http.middlewares.prometheus-strip.stripprefix.prefixes=/prometheus'
      - 'traefik.http.routers.prometheus.middlewares=prometheus-strip@docker'
      - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana para visualização de métricas
  grafana:
    image: grafana/grafana:10.3.3
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
      - GF_SERVER_ROOT_URL=https://walletapi.duckdns.org/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`walletapi.duckdns.org`) && PathPrefix(`/grafana`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls.certresolver=myresolver'
      - 'traefik.http.middlewares.grafana-strip.stripprefix.prefixes=/grafana'
      - 'traefik.http.routers.grafana.middlewares=grafana-strip@docker'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
    networks:
      - vizo_network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus

  api:
    build: .
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
      keycloak: { condition: service_started }
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS}
      ALGORITHM: ${ALGORITHM}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      OAUTH_CALLBACK_URL: ${OAUTH_CALLBACK_URL}
      # Configurações Keycloak
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      USE_KEYCLOAK: ${USE_KEYCLOAK}
      # MFA
      MFA_ISSUER: ${MFA_ISSUER}
      # Configurações Google GenAI para chatbot
      GOOGLE_GENAI_API_KEY: ${GOOGLE_GENAI_API_KEY}
      GOOGLE_GENAI_MODEL: ${GOOGLE_GENAI_MODEL}
      USE_LLM: ${USE_LLM}
      # Outras
      ENABLE_PROMETHEUS: ${ENABLE_PROMETHEUS}
      API_V1_STR: ${API_V1_STR}
      PROJECT_NAME: ${PROJECT_NAME}
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports: ["8000:8000"]
    networks:
      - vizo_network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.walletapi.rule=Host(`walletapi.duckdns.org`) && PathPrefix(`/api`)'
      - 'traefik.http.routers.walletapi.entrypoints=websecure'
      - 'traefik.http.routers.walletapi.tls.certresolver=myresolver'
      - 'traefik.http.middlewares.walletapi-strip.stripprefix.prefixes=/api'
      - 'traefik.http.routers.walletapi.middlewares=walletapi-strip@docker'
      - 'traefik.http.services.walletapi.loadbalancer.server.port=8000'
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  db_data:
  redis_data:
  pgadmin_data:
  keycloak_data:
  prometheus_data:
  grafana_data:

networks:
  vizo_network:
    external: true